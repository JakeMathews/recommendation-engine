/*
 * This file is generated by jOOQ.
 */
package com.mathews.recommender.jooq.public_.tables;


import com.mathews.recommender.jooq.public_.Indexes;
import com.mathews.recommender.jooq.public_.Keys;
import com.mathews.recommender.jooq.public_.Public;
import com.mathews.recommender.jooq.public_.tables.Actions.ActionsPath;
import com.mathews.recommender.jooq.public_.tables.records.RecommendationsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Recommendations extends TableImpl<RecommendationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recommendations</code>
     */
    public static final Recommendations RECOMMENDATIONS = new Recommendations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecommendationsRecord> getRecordType() {
        return RecommendationsRecord.class;
    }

    /**
     * The column <code>public.recommendations.id</code>.
     */
    public final TableField<RecommendationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.recommendations.user_id</code>.
     */
    public final TableField<RecommendationsRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.recommendations.action_id</code>.
     */
    public final TableField<RecommendationsRecord, String> ACTION_ID = createField(DSL.name("action_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.recommendations.score</code>.
     */
    public final TableField<RecommendationsRecord, BigDecimal> SCORE = createField(DSL.name("score"), SQLDataType.NUMERIC(5, 4).nullable(false), this, "");

    /**
     * The column <code>public.recommendations.created_at</code>.
     */
    public final TableField<RecommendationsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Recommendations(Name alias, Table<RecommendationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Recommendations(Name alias, Table<RecommendationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.recommendations</code> table reference
     */
    public Recommendations(String alias) {
        this(DSL.name(alias), RECOMMENDATIONS);
    }

    /**
     * Create an aliased <code>public.recommendations</code> table reference
     */
    public Recommendations(Name alias) {
        this(alias, RECOMMENDATIONS);
    }

    /**
     * Create a <code>public.recommendations</code> table reference
     */
    public Recommendations() {
        this(DSL.name("recommendations"), null);
    }

    public <O extends Record> Recommendations(Table<O> path, ForeignKey<O, RecommendationsRecord> childPath, InverseForeignKey<O, RecommendationsRecord> parentPath) {
        super(path, childPath, parentPath, RECOMMENDATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RecommendationsPath extends Recommendations implements Path<RecommendationsRecord> {
        public <O extends Record> RecommendationsPath(Table<O> path, ForeignKey<O, RecommendationsRecord> childPath, InverseForeignKey<O, RecommendationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RecommendationsPath(Name alias, Table<RecommendationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RecommendationsPath as(String alias) {
            return new RecommendationsPath(DSL.name(alias), this);
        }

        @Override
        public RecommendationsPath as(Name alias) {
            return new RecommendationsPath(alias, this);
        }

        @Override
        public RecommendationsPath as(Table<?> alias) {
            return new RecommendationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_RECOMMENDATION_SCORE, Indexes.IDX_RECOMMENDATION_USER_ID);
    }

    @Override
    public Identity<RecommendationsRecord, Integer> getIdentity() {
        return (Identity<RecommendationsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RecommendationsRecord> getPrimaryKey() {
        return Keys.RECOMMENDATIONS_PKEY;
    }

    @Override
    public List<ForeignKey<RecommendationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RECOMMENDATIONS__RECOMMENDATIONS_ACTION_ID_FKEY);
    }

    private transient ActionsPath _actions;

    /**
     * Get the implicit join path to the <code>public.actions</code> table.
     */
    public ActionsPath actions() {
        if (_actions == null)
            _actions = new ActionsPath(this, Keys.RECOMMENDATIONS__RECOMMENDATIONS_ACTION_ID_FKEY, null);

        return _actions;
    }

    @Override
    public Recommendations as(String alias) {
        return new Recommendations(DSL.name(alias), this);
    }

    @Override
    public Recommendations as(Name alias) {
        return new Recommendations(alias, this);
    }

    @Override
    public Recommendations as(Table<?> alias) {
        return new Recommendations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(String name) {
        return new Recommendations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(Name name) {
        return new Recommendations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(Table<?> name) {
        return new Recommendations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Condition condition) {
        return new Recommendations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
