/*
 * This file is generated by jOOQ.
 */
package com.mathews.recommender.jooq.public_.tables;


import com.mathews.recommender.jooq.public_.Keys;
import com.mathews.recommender.jooq.public_.Public;
import com.mathews.recommender.jooq.public_.tables.Recommendations.RecommendationsPath;
import com.mathews.recommender.jooq.public_.tables.records.ActionsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Actions extends TableImpl<ActionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.actions</code>
     */
    public static final Actions ACTIONS = new Actions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActionsRecord> getRecordType() {
        return ActionsRecord.class;
    }

    /**
     * The column <code>public.actions.action_id</code>.
     */
    public final TableField<ActionsRecord, String> ACTION_ID = createField(DSL.name("action_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.actions.member_id</code>.
     */
    public final TableField<ActionsRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.actions.item_id</code>.
     */
    public final TableField<ActionsRecord, String> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.actions.timestamp</code>.
     */
    public final TableField<ActionsRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Actions(Name alias, Table<ActionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Actions(Name alias, Table<ActionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.actions</code> table reference
     */
    public Actions(String alias) {
        this(DSL.name(alias), ACTIONS);
    }

    /**
     * Create an aliased <code>public.actions</code> table reference
     */
    public Actions(Name alias) {
        this(alias, ACTIONS);
    }

    /**
     * Create a <code>public.actions</code> table reference
     */
    public Actions() {
        this(DSL.name("actions"), null);
    }

    public <O extends Record> Actions(Table<O> path, ForeignKey<O, ActionsRecord> childPath, InverseForeignKey<O, ActionsRecord> parentPath) {
        super(path, childPath, parentPath, ACTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ActionsPath extends Actions implements Path<ActionsRecord> {
        public <O extends Record> ActionsPath(Table<O> path, ForeignKey<O, ActionsRecord> childPath, InverseForeignKey<O, ActionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ActionsPath(Name alias, Table<ActionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ActionsPath as(String alias) {
            return new ActionsPath(DSL.name(alias), this);
        }

        @Override
        public ActionsPath as(Name alias) {
            return new ActionsPath(alias, this);
        }

        @Override
        public ActionsPath as(Table<?> alias) {
            return new ActionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActionsRecord> getPrimaryKey() {
        return Keys.ACTIONS_PKEY;
    }

    private transient RecommendationsPath _recommendations;

    /**
     * Get the implicit to-many join path to the
     * <code>public.recommendations</code> table
     */
    public RecommendationsPath recommendations() {
        if (_recommendations == null)
            _recommendations = new RecommendationsPath(this, null, Keys.RECOMMENDATIONS__RECOMMENDATIONS_ACTION_ID_FKEY.getInverseKey());

        return _recommendations;
    }

    @Override
    public Actions as(String alias) {
        return new Actions(DSL.name(alias), this);
    }

    @Override
    public Actions as(Name alias) {
        return new Actions(alias, this);
    }

    @Override
    public Actions as(Table<?> alias) {
        return new Actions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Actions rename(String name) {
        return new Actions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Actions rename(Name name) {
        return new Actions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Actions rename(Table<?> name) {
        return new Actions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions where(Condition condition) {
        return new Actions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Actions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Actions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Actions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Actions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Actions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
