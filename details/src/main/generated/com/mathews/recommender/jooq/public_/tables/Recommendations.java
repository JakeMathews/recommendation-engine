/*
 * This file is generated by jOOQ.
 */
package com.mathews.recommender.jooq.public_.tables;


import com.mathews.recommender.jooq.public_.Keys;
import com.mathews.recommender.jooq.public_.Public;
import com.mathews.recommender.jooq.public_.tables.records.RecommendationsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Recommendations extends TableImpl<RecommendationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.recommendations</code>
     */
    public static final Recommendations RECOMMENDATIONS = new Recommendations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecommendationsRecord> getRecordType() {
        return RecommendationsRecord.class;
    }

    /**
     * The column <code>public.recommendations.recommendation_id</code>.
     */
    public final TableField<RecommendationsRecord, String> RECOMMENDATION_ID = createField(DSL.name("recommendation_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.recommendations.member_id</code>.
     */
    public final TableField<RecommendationsRecord, String> MEMBER_ID = createField(DSL.name("member_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.recommendations.item_id</code>.
     */
    public final TableField<RecommendationsRecord, String> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.recommendations.alternate_item_ids</code>.
     */
    public final TableField<RecommendationsRecord, String[]> ALTERNATE_ITEM_IDS = createField(DSL.name("alternate_item_ids"), SQLDataType.VARCHAR(255).array(), this, "");

    /**
     * The column <code>public.recommendations.generated_at</code>.
     */
    public final TableField<RecommendationsRecord, LocalDateTime> GENERATED_AT = createField(DSL.name("generated_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Recommendations(Name alias, Table<RecommendationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Recommendations(Name alias, Table<RecommendationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.recommendations</code> table reference
     */
    public Recommendations(String alias) {
        this(DSL.name(alias), RECOMMENDATIONS);
    }

    /**
     * Create an aliased <code>public.recommendations</code> table reference
     */
    public Recommendations(Name alias) {
        this(alias, RECOMMENDATIONS);
    }

    /**
     * Create a <code>public.recommendations</code> table reference
     */
    public Recommendations() {
        this(DSL.name("recommendations"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RecommendationsRecord> getPrimaryKey() {
        return Keys.RECOMMENDATIONS_PKEY;
    }

    @Override
    public Recommendations as(String alias) {
        return new Recommendations(DSL.name(alias), this);
    }

    @Override
    public Recommendations as(Name alias) {
        return new Recommendations(alias, this);
    }

    @Override
    public Recommendations as(Table<?> alias) {
        return new Recommendations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(String name) {
        return new Recommendations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(Name name) {
        return new Recommendations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Recommendations rename(Table<?> name) {
        return new Recommendations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Condition condition) {
        return new Recommendations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Recommendations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Recommendations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
